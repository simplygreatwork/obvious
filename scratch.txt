
- use console colors: chalk
- separate derived engines
- use facade for gates
	- to distinguish targets from controls
- find out why quantastica starts so slowly
- for adder.js example, make it easier to set and get 4-bit values
	- circuit.unit(1, 4).write()
	- circuit.unit(1, 4).read()
	- let cin = circuit.unit(0)
	- let a = circuit.unit(1, 4)
	- let b = circuit.unit(5, 4)
	- let cout = circuit.unit(9)
- in addition to .each(), use .one() in adder.js
	- circuit.one(function() {})
	- or
	- let result = circuit.one()
	
- consider whether to allow:
- either circuit.addGate(targets, controls)
- or circuit.addGate(controls, targets)
- e.g. circuit.options({ controls_first : true})

- allow: no-trace, no-changes

- https://github.com/unconed/mathbox

- adder.js get_value(index, length)
	- see unit.js

- circuit.read(5, 4)
- circuit.write(5, 4, value)
- better:
	- .unit(0, 1).read()
	- .unit(0, 1).write(1)
	- .unit(0, 4).read()
	- .unit(0, 4).write(14)
	- circuit.unit(0, 3).read()
	- circuit.unit(0, 3).write(14)
	- to keep range implementation out of the circuit implementation
	
- no abbreviation  h -> hadamard

- make amplify example more configurable
- e.g. which outcome?
- also: how to customize the level of an amplification?

- inside format.label - use Bits class instead

- changes does not seem to be displaying changes properly

- https://en.wikipedia.org/wiki/Alice_and_Bob

- add individual qubit objects to circuits
- add gate functions to individual qubits

- create larger qfts dynamically
- see: https://github.com/oreilly-qc/oreilly-qc.github.io/blob/master/samples/QCEngine/ch07_04_qft_big_sq_wave.js

- move changes/changed out of core circuit

- create an example which illustrates that phase operations on zero state have no effect
- also illustrate in superposition

- create a glossary
- also: what is the formal name for the output array?
	- state vector?

- need to enforce when we are expecting a single result at 100% probability
- .one()

- how to create probability spread among 3 of 4?
- example: 33.33% 33.33% 33.33% 0%
- instead of: 25% 25% 25% 25%

- allow configuration of phase display 0 - 360

- create an examples index.md / README document

- implement phase gate .phase(0, 20)

- unit(0), unit(0, 1), unit(0), unit(0, 2)

- implement measure and unit measure

- remove number_to_bits & bits_to_number from Utility

- move Chain into Utility.js

- implement chain for units in Utility.js

- example: circuit.unit(0, 2).unit(1).measure()

- what if the unit qubits are not contiguous

- implement circuit.unit

- implement circuit.one - fail if less than 100.00%

- .one() and .each() should probably actually be .measure() before run

- can measuring into classical register variables be optional?
	- instead measure into functions
	- instead call circuit.measure(function(result) {})
	- instead call circuit.unit(0).measure(function(result) {})

- zero based indexes or one based indexes?
- use circuit configuration
	
	let circuit = require('../src/circuit.js')(name, size, {
		engine: 'optimized',
		order: ['targets', 'controls'] || ['controls', 'targets']
		indexing: 0 || 1
	})

- gate facade

- issue: a default circuit should return 100% at state | >
	- fixed

- maybe

circuit.unit(0, 6, function(unit) {
	unit.h()
})
.swap(0, 1)
.run()

or better

circuit
.unit(0, 6)
	.h()
.circuit()
	.swap(0, 1)
.run()

- remove params attribute (consolidate)

- implement circuit options
	- targets/controls
	- endian-ness
	- engine
	
- difference between swap and teleport?

- how to conditional teleport?

- maybe allow for passing of an array to unit()

- phase rotation changes do not appear to print correctly - no evidence of change from the right column

- store to executed results of each example in the repo - for quick browsing review without installing

- idea: circuit().input().run()
- then: circuit().input().transform().run()

- is it possible to illustatate the vector state of each qubit from the amplitudes?
- look at quantum-circuit

- example with non-contrived inputs
- because amplifying "14" seems contrived
- come up with some example where we amplify some individual outcome bits with indivuidual meaning
- what sort of illustration can we come up with with say 16 or 20 qubits

- how does entanglement work in a simulator? how does another qubit automatically update?

- illustrate why it is necessary to run a circuit many times
- because you can't actually see the internal structure of the probability
- you measure but you might not get the most likely result
- so run again multiple times to measure for more certainty

- create header for state results
	- the phase column is not obvious
	
- puzzle: table of 10: alternate seating of male female
- puzzle: table of 12: alternate seating of male, female, girl, boy 
- puzzle: how to turn the qubits off
- puzzle: what are some ideas for desired state outputs
- puzzle: maze?

- example: reversibility
- illustrate what is reversible and what is not reversible
- illustrate that phase is no technically reversible until loop around again
- but show how to use negative phi, sdagger, tdagger

- illustrate s, t as rz(phi)